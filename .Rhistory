survey='acs5',
geometry=TRUE
)
head(bg_data_19)
#separate table so that pivot will work
bg_data_19_var <- bg_data_19 %>% dplyr::select(c("GEOID", "variable","estimate", "geometry"))
bg_data_19_geom <- bg_data_19 %>% dplyr::select(c("GEOID", "geometry"))
#pivot and group
bg_data_19_var <- bg_data_19_var %>%
group_by(GEOID, variable) %>%
st_set_geometry(NULL) %>%
pivot_wider(id_cols = GEOID,
names_from = variable,
values_from = estimate,
values_fill = list(estimate = 0))
#merge pivoted table with geometry
bg_data_19_merge <- merge(bg_data_19_var, bg_data_19_geom)
see<-st_intersects(caps,bg_data_19_merge)
head(see)
caps<- st_as_sf(geocoded, coords=c("Longitude", "Latitude"), crs=4326)
typeof(caps)
class(caps)
see<-st_intersects(caps,bg_data_19_merge)
class(caps)
head(caps)
see<-st_intersects(caps,bg_data_19_merge)
#this takes a csv with geocoded addresses (lon and lat columns) and aggregates points to census tract and block groups
#set working directory and get data
setwd("C:/Users/laura/Desktop/wayne_metro_testing")
geocoded <- read.csv("HeadersDemo.csv")
#remove NAs based on latitude
geocoded <- geocoded[!is.na(geocoded$Latitude),]
#require libraries
require("tidyverse")
require("tidycensus")
require("tools")
require("dplyr")
require("stringr")
require("data.table")
require("plyr")
require("sf")
require("tidyr")
library("readxl")
options(tigris_use_cache = TRUE) #this caches the ACS geometry
#convert to sf, assign lat and lon, coordinate reference
geocoded$Latitude <- as.numeric(geocoded$Latitude)
geocoded$Longitude <- as.numeric(geocoded$Longitude)
caps<- st_as_sf(geocoded, coords=c("Longitude", "Latitude"), crs=4326)
#Downloading census data with tidy census
#connect with census API
census_api_key("d463ce221e5a0730da51aa1e4200ec68d7ee6c81", install = TRUE, overwrite = TRUE)
variables <- load_variables(2019, 'acs5', cache = TRUE)
#View(variables)
my_var <- c(total_houses = "B11001_001",
family_house = "B11001_002",
nonfamily_house = "B11001_007")
#get variables at block group level in king county WA in 2019 with geometry
bg_data_19 <- get_acs(
geography = "block group",
county = "King",
year = 2019,
state = "WA",
variables = my_var,
survey='acs5',
geometry=TRUE
)
#separate table so that pivot will work
bg_data_19_var <- bg_data_19 %>% dplyr::select(c("GEOID", "variable","estimate", "geometry"))
bg_data_19_geom <- bg_data_19 %>% dplyr::select(c("GEOID", "geometry"))
#pivot and group
bg_data_19_var <- bg_data_19_var %>%
group_by(GEOID, variable) %>%
st_set_geometry(NULL) %>%
pivot_wider(id_cols = GEOID,
names_from = variable,
values_from = estimate,
values_fill = list(estimate = 0))
#merge pivoted table with geometry
bg_data_19_merge <- merge(bg_data_19_var, bg_data_19_geom)
#head(bg_data_19_merge)
#may need to transform coordinate system
#Total number of shutoffs across all years
#bg_data_19_merge$caps<-lengths(st_intersects(bg_data_19_merge, caps) )
#head(bg_data_19_merge)
see<-st_intersects(caps,bg_data_19_merge)
head(see)
#caps$bg<-which(st_intersects())
#bg_data_19_merge$caps<-st_intersects()
see<-sf::st_intersects(caps,bg_data_19_merge)
class(bg_data_19_merge)
bg_data_19_merge <- st_set_geometry(bg_data_19_merge, 'geometry') #%>% st_transform(4326)
see<-sf::st_intersects(caps,bg_data_19_merge)
bg_data_19_merge <- st_set_geometry(bg_data_19_merge, 'geometry') %>% st_transform(4326)
see<-sf::st_intersects(caps,bg_data_19_merge)
head(see)
View(see)
View(see)
View(geocoded)
View(geocoded)
View(see)
View(see)
head(see[1])
see<-st_intersects(bg_data_19_merge,caps)
View(see)
View(see)
see<-st_intersects(caps,bg_data_19_merge)
see[1]
bg_data_19_merge[670]
bg_data_19_merge[670,1]
View(caps)
see<-st_intersects(caps,bg_data_19_merge)
View(see)
bg_data_19_merge[670,2]
bg_data_19_merge[671,1]
see<-lengths(st_intersects(caps,bg_data_19_merge))
see[1]
see
bg_data_19_merge[670,1]
bg_data_19_merge[671,1]
bg_data_19_merge[672,1]
bg_data_19_merge[673,1]
see<-lengths(st_intersects(bg_data_19_merge,caps))
head(see)
see[670]
see[671]
see[672]
see[673]
View(bg_data_19)
View(bg_data_19)
View(bg_data_19)
#pivot and group
bg_data_19_var <- bg_data_19_var %>%
group_by(GEOID, variable) %>%
st_set_geometry(NULL) %>%
pivot_wider(id_cols = GEOID,
names_from = variable,
values_from = estimate,
values_fill = list(estimate = 0))
#set working directory and get data
setwd("C:/Users/laura/Desktop/wayne_metro_testing")
geocoded <- read.csv("HeadersDemo.csv")
#remove NAs based on latitude
geocoded <- geocoded[!is.na(geocoded$Latitude),]
#require libraries
require("tidyverse")
require("tidycensus")
require("tools")
require("dplyr")
require("stringr")
require("data.table")
require("plyr")
require("sf")
require("tidyr")
library("readxl")
options(tigris_use_cache = TRUE) #this caches the ACS geometry
#convert to sf, assign lat and lon, coordinate reference
geocoded$Latitude <- as.numeric(geocoded$Latitude)
geocoded$Longitude <- as.numeric(geocoded$Longitude)
caps<- st_as_sf(geocoded, coords=c("Longitude", "Latitude"), crs=4326)
#Downloading census data with tidy census
#connect with census API
census_api_key("d463ce221e5a0730da51aa1e4200ec68d7ee6c81", install = TRUE, overwrite = TRUE)
variables <- load_variables(2019, 'acs5', cache = TRUE)
my_var <- c(total_houses = "B11001_001",
family_house = "B11001_002",
nonfamily_house = "B11001_007")
#get variables at block group level in king county WA in 2019 with geometry
bg_data_19 <- get_acs(
geography = "block group",
county = "King",
year = 2019,
state = "WA",
variables = my_var,
survey='acs5',
geometry=TRUE
)
#separate table so that pivot will work
bg_data_19_var <- bg_data_19 %>% dplyr::select(c("GEOID", "variable","estimate", "geometry"))
bg_data_19_geom <- bg_data_19 %>% dplyr::select(c("GEOID", "geometry"))
View(bg_data_19_merge)
View(bg_data_19_geom)
#pivot and group
bg_data_19_var <- bg_data_19_var %>%
group_by(GEOID, variable) %>%
st_set_geometry(NULL) %>%
pivot_wider(id_cols = GEOID,
names_from = variable,
values_from = estimate,
values_fill = list(estimate = 0))
View(bg_data_19)
View(bg_data_19_geom)
View(bg_data_19_merge)
View(bg_data_19_var)
View(bg_data_19_merge)
View(bg_data_19_var)
View(bg_data_19_var)
#merge pivoted table with geometry
bg_data_19_merge <- merge(bg_data_19_var, bg_data_19_geom)
View(bg_data_19_var)
View(bg_data_19_merge)
View(bg_data_19_merge)
#merge pivoted table with geometry
bg_data_19_merge <- merge(bg_data_19_var, bg_data_19_geom,by.GEOID)
View(caps)
#pivot and group
bg_data_19_var <- bg_data_19_var %>%
group_by(GEOID, variable) %>%
st_set_geometry(NULL) %>%
pivot_wider(id_cols = GEOID,
names_from = variable,
values_from = estimate,
values_fill = list(estimate = 0))
#merge pivoted table with geometry
bg_data_19_merge <- merge(bg_data_19_var, bg_data_19_geom,by.GEOID)
#separate table so that pivot will work
bg_data_19_var <- bg_data_19 %>% dplyr::select(c("GEOID", "variable","estimate", "geometry"))
bg_data_19_geom <- bg_data_19 %>% dplyr::select(c("GEOID", "geometry"))
#pivot and group
bg_data_19_var <- bg_data_19_var %>%
group_by(GEOID, variable) %>%
st_set_geometry(NULL) %>%
pivot_wider(id_cols = GEOID,
names_from = variable,
values_from = estimate,
values_fill = list(estimate = 0))
#merge pivoted table with geometry
bg_data_19_merge <- merge(bg_data_19_var, bg_data_19_geom)
bg_data_19_geom <- unique(bg_data_19 %>% dplyr::select(c("GEOID", "geometry")))
#pivot and group
bg_data_19_var <- bg_data_19_var %>%
group_by(GEOID, variable) %>%
st_set_geometry(NULL) %>%
pivot_wider(id_cols = GEOID,
names_from = variable,
values_from = estimate,
values_fill = list(estimate = 0))
#this takes a csv with geocoded addresses (lon and lat columns) and aggregates points to census tract and block groups
#set working directory and get data
setwd("C:/Users/laura/Desktop/wayne_metro_testing")
geocoded <- read.csv("HeadersDemo.csv")
#remove NAs based on latitude
geocoded <- geocoded[!is.na(geocoded$Latitude),]
#require libraries
require("tidyverse")
require("tidycensus")
require("tools")
require("dplyr")
require("stringr")
require("data.table")
require("plyr")
require("sf")
require("tidyr")
library("readxl")
options(tigris_use_cache = TRUE) #this caches the ACS geometry
#convert to sf, assign lat and lon, coordinate reference
geocoded$Latitude <- as.numeric(geocoded$Latitude)
geocoded$Longitude <- as.numeric(geocoded$Longitude)
caps<- st_as_sf(geocoded, coords=c("Longitude", "Latitude"), crs=4326)
#Downloading census data with tidy census
#connect with census API
census_api_key("d463ce221e5a0730da51aa1e4200ec68d7ee6c81", install = TRUE, overwrite = TRUE)
variables <- load_variables(2019, 'acs5', cache = TRUE)
#View(variables)
my_var <- c(total_houses = "B11001_001",
family_house = "B11001_002",
nonfamily_house = "B11001_007")
#get variables at block group level in king county WA in 2019 with geometry
bg_data_19 <- get_acs(
geography = "block group",
county = "King",
year = 2019,
state = "WA",
variables = my_var,
survey='acs5',
geometry=TRUE
)
#separate table so that pivot will work
bg_data_19_var <- bg_data_19 %>% dplyr::select(c("GEOID", "variable","estimate", "geometry"))
bg_data_19_geom <- unique(bg_data_19 %>% dplyr::select(c("GEOID", "geometry")))
#pivot and group
bg_data_19_var <- bg_data_19_var %>%
group_by(GEOID, variable) %>%
st_set_geometry(NULL) %>%
pivot_wider(id_cols = GEOID,
names_from = variable,
values_from = estimate,
values_fill = list(estimate = 0))
#merge pivoted table with geometry
bg_data_19_merge <- merge(bg_data_19_var, bg_data_19_geom)
#head(bg_data_19_merge)
bg_data_19_merge <- st_set_geometry(bg_data_19_merge, 'geometry') %>% st_transform(4326)
#Total number of shutoffs across all years
#bg_data_19_merge$caps<-lengths(st_intersects(bg_data_19_merge, caps) )
#head(bg_data_19_merge)
see<-lengths(st_intersects(bg_data_19_merge,caps))
see[673]
bg_data_19_merge[671,1]
#caps$bg<-which(st_intersects())
#bg_data_19_merge$caps<-st_intersects()
see<-lengths(st_intersects(caps,bg_data_19_merge))
see
locations <- st_intersects(caps,bg_data_19_merge))
locations <- st_intersects(caps,bg_data_19_merge)
View(locations)
View(locations)
bg_data_19_merge[locations[1]]
bg_data_19_merge[locations[1],1]
bg_data_19_merge[(locations[1]),1]
View(locations)
locations[1]
class(locations[1])
locations[1][1]
class(locations[1][1])
locations <- unlist(st_intersects(caps,bg_data_19_merge))
locations[[1]]
bg_data_19_merge[locations[[1]],1]
View(caps)
View(caps)
locations[[1]]$GEOID
bg_data_19_merge[locations[[1]],1]$GEOID
bg_data_19_merge$bg <- bg_data_19_merge[locations[[1]],1]$GEOID
View(bg_data_19_merge)
caps$bg <- bg_data_19_merge[locations[[:]],1]$GEOID
for (i in 1:length(caps)) {
caps$bg <- bg_data_19_merge[locations[[i]],1]$GEOID
}
length(caps)
width(caps)
nrow(caps)
for (i in 1:nrow(caps)) {
caps$bg <- bg_data_19_merge[locations[[i]],1]$GEOID
}
View(caps)
locations[[3]]
caps$bg
bg_data_19_merge[locations[[i]],1]$GEOID
caps$bg
bg_data_19_merge[locations[[3]],1]$GEOID
bg_data_19_merge[locations[[2]],1]$GEOID
bg_data_19_merge[locations[[1]],1]$GEOID
locations <- st_intersects(caps,bg_data_19_merge)
for (i in 1:nrow(caps)) {
caps$bg <- bg_data_19_merge[locations[[i]],1]$GEOID
bg_data_19_merge[locations[[i]],1]$GEOID
}
caps$bg
bg_data_19_merge[locations[[1]],1]$GEOID
for (i in 1:nrow(caps)) {
i
caps$bg <- bg_data_19_merge[locations[[i]],1]$GEOID
bg_data_19_merge[locations[[i]],1]$GEOID
}
print(i)
for (x in 1:nrow(caps)) {
print(x)
caps$bg <- bg_data_19_merge[locations[[x]],1]$GEOID
bg_data_19_merge[locations[[i]],1]$GEOID
}
caps$bg
caps$bg[x] <- bg_data_19_merge[locations[[x]],1]$GEOID
bg_data_19_merge[locations[[i]],1]$GEOID
for (x in 1:nrow(caps)) {
print(x)
caps$bg[x] <- bg_data_19_merge[locations[[x]],1]$GEOID
bg_data_19_merge[locations[[i]],1]$GEOID
}
caps$bg
View(caps)
redacted_accts <- caps %>% select(!Physical.Address.1)
View(redacted_accts)
redacted_accts <- caps %>% select(!Physical.Address.1,!Physical.Address.2)
View(redacted_accts)
redacted_accts <- caps %>% select(!(Physical.Address.1,Physical.Address.2,Physical.City,Physical.State,Physical.Zip))
redacted_accts <- caps %>% select(!Physical.Address&!Physical.Address.2&!Physical.City&!Physical.State&!Physical.Zip))
redacted_accts <- caps %>% select(!Physical.Address&!Physical.Address.2&!Physical.City&!Physical.State&!Physical.Zip)
redacted_accts <- caps %>% select(!Physical.Address.1&!Physical.Address.2&!Physical.City&!Physical.State&!Physical.Zip)
View(redacted_accts)
redacted_accts <- caps %>% select(!Physical.Address.1&!Physical.Address.2&!Physical.City&!Physical.State&!Physical.Zip&!geometry)
View(redacted_accts)
redacted_accts <- caps %>% select(!Physical.Address.1&!Physical.Address.2&!Physical.City&!Physical.State&!Physical.Zip&!geometry)
View(redacted_accts)
class(redacted_accts)
redacted_accts <- st_drop_geometry(caps %>% select(!Physical.Address.1&!Physical.Address.2&!Physical.City&!Physical.State&!Physical.Zip&!geometry))
View(redacted_accts)
redacted_accts <- st_drop_geometry(caps %>% select(!Physical.Address.1&!Physical.Address.2&!Physical.City&!Physical.State&!Physical.Zip))
View(redacted_accts)
#include variables that you want removed
redacted_accts <- st_drop_geometry(caps %>% select(
!Physical.Address.1
&!Physical.Address.2
&!Physical.City
&!Physical.State
&!Physical.Zip))
View(redacted_accts)
#include variables that you want removed
redacted_accts <- st_drop_geometry(caps %>% select(
!Physical.Address.1
&!Physical.Address.2
&!Physical.City
&!Physical.State
&!Physical.Zip
&!First.Name
&!Last.Name
&!Home.Phone
&!Cell.Phone))
View(redacted_accts)
#include variables that you want removed
redacted_accts <- st_drop_geometry(caps %>% select(
!Physical.Address.1
&!Physical.Address.2
&!Physical.City
&!Physical.State
&!Physical.Zip
&!First.Name
&!Last.Name
&!Home.Phone..
&!Cell.Phone..))
View(redacted_accts)
#remove identifying columns
redacted_accts <- st_drop_geometry(caps %>% select(
!Physical.Address.1
&!Physical.Address.2
&!Physical.City
&!Physical.State
&!Physical.Zip
&!First.Name
&!Last.Name
&!Home.Phone..
&!Cell.Phone..))
#create csv file with assigned block groups
write.csv(redacted_accts, file = "CAPAccountsRedacted.csv")
class(bg_data_19_merge)
#this takes a csv with geocoded addresses (lon and lat columns) and aggregates points to census tract and block groups
#set working directory and get data
setwd("C:/Users/laura/Desktop/wayne_metro_testing")
geocoded <- read.csv("HeadersDemo.csv")
#remove NAs based on latitude
geocoded <- geocoded[!is.na(geocoded$Latitude),]
#require libraries
require("tidyverse")
require("tidycensus")
require("tools")
require("dplyr")
require("stringr")
require("data.table")
require("plyr")
require("sf")
require("tidyr")
library("readxl")
options(tigris_use_cache = TRUE) #this caches the ACS geometry
#convert to sf, assign lat and lon, coordinate reference
geocoded$Latitude <- as.numeric(geocoded$Latitude)
geocoded$Longitude <- as.numeric(geocoded$Longitude)
caps<- st_as_sf(geocoded, coords=c("Longitude", "Latitude"), crs=4326)
#Downloading census data with tidy census
#connect with census API
census_api_key("d463ce221e5a0730da51aa1e4200ec68d7ee6c81", install = TRUE, overwrite = TRUE)
variables <- load_variables(2019, 'acs5', cache = TRUE)
#View(variables)
my_var <- c(total_houses = "B11001_001",
family_house = "B11001_002",
nonfamily_house = "B11001_007")
#get variables at block group level in king county WA in 2019 with geometry
bg_data_19 <- get_acs(
geography = "block group",
county = "King",
year = 2019,
state = "WA",
variables = my_var,
survey='acs5',
geometry=TRUE
)
#separate table so that pivot will work
bg_data_19_var <- bg_data_19 %>% dplyr::select(c("GEOID", "variable","estimate", "geometry"))
bg_data_19_geom <- unique(bg_data_19 %>% dplyr::select(c("GEOID", "geometry")))
#pivot and group
bg_data_19_var <- bg_data_19_var %>%
group_by(GEOID, variable) %>%
st_set_geometry(NULL) %>%
pivot_wider(id_cols = GEOID,
names_from = variable,
values_from = estimate,
values_fill = list(estimate = 0))
#merge pivoted table with geometry
bg_data_19_merge <- merge(bg_data_19_var, bg_data_19_geom)
class(bg_data_19_merge)
#assign geometry to data
bg_data_19_merge <- st_set_geometry(bg_data_19_merge, 'geometry') %>% st_transform(4326)
#find corresponding block group + assign GEOID of block group to account
locations <- st_intersects(caps,bg_data_19_merge)
bg_data_19_merge[locations[[1]],1]$GEOID
for (x in 1:nrow(caps)) {
print(x)
caps$bg[x] <- bg_data_19_merge[locations[[x]],1]$GEOID
bg_data_19_merge[locations[[i]],1]$GEOID
}
#remove identifying columns
redacted_accts <- st_drop_geometry(caps %>% select(
!Physical.Address.1
&!Physical.Address.2
&!Physical.City
&!Physical.State
&!Physical.Zip
&!First.Name
&!Last.Name
&!Home.Phone..
&!Cell.Phone..))
#create csv file with assigned block groups
write.csv(redacted_accts, file = "CAPAccountsRedacted.csv")
#change county
#finish readme
#add tract
